{"version":3,"sources":["Components/Landing/Landing.js","Components/Footer/Footer.js","Components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Landing","React","useState","scrolled","setScrolled","handleScroll","offset","window","scrollY","useEffect","addEventListener","x","push","y","z","className","join","Footer","Main","Fragment","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wTA6DeA,G,MA1DC,WAAO,IAAD,EACcC,IAAMC,UAAS,GAD7B,mBACXC,EADW,KACDC,EADC,KAGZC,EAAe,WACjB,IAAMC,EAASC,OAAOC,QAElBJ,EADAE,EAAS,IAOjBG,qBAAU,WACNF,OAAOG,iBAAiB,SAAUL,MAGtC,IAAIM,EAAI,CAAC,mBACLR,GACAQ,EAAEC,KAAK,YAGX,IAAIC,EAAI,CAAC,gBACLV,GACAU,EAAED,KAAK,YAEX,IAAIE,EAAI,CAAC,MAAO,SAKhB,OAJIX,GACAW,EAAEF,KAAK,YAIP,6BACI,yBAAKG,UAAU,WACX,yBAAKA,UAAWJ,EAAEK,KAAK,MACnB,yBAAKD,UAAWF,EAAEG,KAAK,MAAvB,YACA,yBAAKD,UAAU,eACX,wBAAIA,UAAWD,EAAEE,KAAK,MAAtB,SACA,wBAAID,UAAU,YAAd,gBAGR,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,kBAAf,sDAGA,yBAAKA,UAAU,qBAAf,qKAKA,yBAAKA,UAAU,4BAAf,qCC9BLE,G,MAnBA,WACX,OACI,4BAAQF,UAAU,UACd,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,gBAAf,YACA,oDACA,+CACA,gDACA,iDAEJ,yBAAKA,UAAU,kBACX,qCACA,wCACA,2CCaDG,G,MA1BF,WACT,OACI,kBAAC,IAAMC,SAAP,KACI,0BAAMJ,UAAU,cACZ,6BAASA,UAAU,SACf,yBAAKA,UAAU,eACX,wCACA,+gBCOTK,MAXf,WACI,OACI,yBAAKL,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKA,UAAU,QACf,kBAAC,EAAD,QCAQM,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e47e03bb.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport './Landing.css';\r\n\r\nconst Landing = () => {\r\n    const [scrolled, setScrolled] = React.useState(false);\r\n\r\n    const handleScroll = () => {\r\n        const offset = window.scrollY;\r\n        if (offset > 0) {\r\n            setScrolled(true);\r\n        } else {\r\n            setScrolled(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', handleScroll);\r\n    });\r\n\r\n    let x = ['landing__header'];\r\n    if (scrolled) {\r\n        x.push('scrolled');\r\n    }\r\n\r\n    let y = ['header__logo'];\r\n    if (scrolled) {\r\n        y.push('scrolled');\r\n    }\r\n    let z = ['btn', 'light'];\r\n    if (scrolled) {\r\n        z.push('scrolled');\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"landing\">\r\n                <div className={x.join(' ')}>\r\n                    <div className={y.join(' ')}>Yogvidya</div>\r\n                    <nav className=\"header__nav\">\r\n                        <li className={z.join(' ')}>Login</li>\r\n                        <li className=\"btn dark\">Free Trial</li>\r\n                    </nav>\r\n                </div>\r\n                <div className=\"landing__content\">\r\n                    <div className=\"content__title\">\r\n                        Online yoga with flexibility. Anywhere, every day.\r\n                    </div>\r\n                    <div className=\"content__subtitle\">\r\n                        Lorem Ipsum Lorem Ipsum is Lorem Ipsum Lore than Lorem\r\n                        Ipsum is Lorem Ipsum Lore Lorem Ipsum Lorem Ipsum is\r\n                        Lorem Ipsum Lore than Lorem Ipsum is Lorem Ipsum Lore\r\n                    </div>\r\n                    <div className=\"content__button btn dark\">\r\n                        Start your 15-day free trial\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Landing;\r\n","import React from 'react';\r\nimport './Footer.css';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer className=\"footer\">\r\n            <div className=\"footer__content\">\r\n                <div className=\"footer__logo\">Yogvidya</div>\r\n                <ul>hfjkshfjsafjashfjjsf</ul>\r\n                <ul>ds.kjfgdljkfgsh</ul>\r\n                <ul>ndjgbdkjgbdjkhhg</ul>\r\n                <ul>ndslfgndljghdjlg</ul>\r\n            </div>\r\n            <div className=\"footer__social\">\r\n                <ul>Insta</ul>\r\n                <ul>Facebook</ul>\r\n                <ul>Twitter</ul>\r\n            </div>\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport './Main.css';\r\n\r\nconst Main = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <main className=\"main__body\">\r\n                <section className=\"about\">\r\n                    <div className=\"about__grid\">\r\n                        <h2>Yogvidya</h2>\r\n                        <p>\r\n                            Glo is online yoga designed for real people—whether\r\n                            you’re a busy mom in need of a quick morning energy\r\n                            boost, or a traveler looking to relax with a yoga\r\n                            nidra before sleep. Work up a sweat with an advanced\r\n                            vinyasa flow, or brush up on the basics in our\r\n                            accessible beginner classes. Whatever your level of\r\n                            experience, life stage, and aspirations—from\r\n                            prenatal strength to mid-workday calm—we’ll help you\r\n                            create an online yoga practice that’s uniquely your\r\n                            own.\r\n                        </p>\r\n                    </div>\r\n                </section>\r\n            </main>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport './App.css';\nimport Landing from './Components/Landing/Landing';\nimport Footer from './Components/Footer/Footer';\nimport Main from './Components/Main/Main';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Landing />\n            <Main />\n            <div className=\"all\"></div>\n            <Footer />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}